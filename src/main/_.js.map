{"version":3,"file":"_.js","sources":["../../node_modules/dotenv/lib/main.js","../../node_modules/electron-is-dev/index.js","index.ts"],"sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n","'use strict';\nconst electron = require('electron');\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst app = electron.app || electron.remote.app;\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !app.isPackaged;\n",null],"names":["path","fs","electron","dotenv","join","app","protocol","BrowserWindow","is_dev"],"mappings":"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"}